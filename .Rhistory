cmaq_loc <- 'data/cmaq/CMAQ/CMAQ'
# list all the CMAQ files
files_all <- list.files( cmaq_loc,
pattern = 'daily8hrmax.*.ncf',
full.names = TRUE)
files_all
f = files_all[1]
print( f)
# isolate the name
name_in <- gsub( '.*daily8hrmax.|.baseline.*', '', f)
print( name_in)
# read in the raster
raster_in <- brick( f) %>% rotate()
library( data.table)
library( raster)
library( sf)
library( magrittr)
library( USAboundaries)
library( data.table)
library( ggplot2)
library( viridis)
# read in the raster
raster_in <- brick( f) %>% rotate()
raster_in
library( ncfd4)
library( ncdf4)
f_in <- nc_open(f)
f_in
f_in
ncatt_get( f_in, 'XORIG')
ncatt_get( f_in, 'global')
ncatt_get(f_in)
ncatt_get(f_in, varid = 0)
ncatt_get(f_in, varid = 0, 'XORIG')
ncatt_get(f_in, varid = 0, 'XORIG')$value
f_in
xorig <- ncatt_get(f_in, varid = 0, 'XORIG')$value
yorig <- ncatt_get(f_in, varid = 0, 'YORIG')$value
xcent <- ncatt_get(f_in, varid = 0, 'XCENT')$value
ycent <- ncatt_get(f_in, varid = 0, 'YCENT')$value
xcent
ycent
p4s <- paste( '+proj=lcc',
paste0( 'lat0=', ycent),
'ellps=WGS84 +datum=WGS84 +no_defs',
sep = ' +')
p4s
p4s <- paste( '+proj=lcc',
paste0( 'lat0=', ycent),
paste0( 'lon0=', xcent),
'ellps=WGS84 +datum=WGS84 +no_defs',
sep = ' +')
p4s
# read in the raster
raster_in <- brick( f, crs = p4s) %>% rotate()
p4s <- paste( '+proj=lcc',
paste0( 'lat0=', ycent),
paste0( 'lat1=', ycent),
paste0( 'lat2=', ycent),
paste0( 'lon0=', xcent),
'ellps=WGS84 +datum=WGS84 +no_defs',
sep = ' +')
p4s
# read in the raster
raster_in <- brick( f, crs = p4s) %>% rotate()
# read in the raster
raster_in <- brick( f) %>% rotate()
plot( raster_in)
plot( raster_in[[1]])
# read in the raster
raster_in <- brick( f) #%>% rotate()
# read in the raster
raster_in <- brick( f) #%>% rotate()
plot( raster_in[[1]])
p4s <- "+proj=lcc +lat_1=34 +lat_2=34
+lat_0=34 +lon_0=110 +x_0=0 +y_0=0
+ellps=WGS84 +datum=WGS84 +units=m +no_defs"
# read in the raster
raster_in <- brick( f, crs = p4s) #%>% rotate()
plot( raster_in)
raster_in
# read in the raster
raster_in <- brick( f) #%>% rotate()
yorig
yorig
xcent
f_in
# Describe grids from grid description
#define lat & lon in meters
lon <- seq( from = xorig, by = xcell, length.out = ncols)
ncols <- ncatt_get(f_in, varid = 0, 'NCOLS')$value
nrows <- ncatt_get(f_in, varid = 0, 'NROWS')$value
xcell <- ncatt_get(f_in, varid = 0, 'XCELL')$value
ycell <- ncatt_get(f_in, varid = 0, 'XCELL')$value
# Describe grids from grid description
#define lat & lon in meters
lon <- seq( from = xorig, by = xcell, length.out = ncols)
lat <- seq( from = yorig, by = xcell, length.out = nrows)
ycent
xcent
xorig
yorig
p4s <- paste( '+proj=lcc',
paste0( 'lat0=', ycent),
paste0( 'lat1=', ycent),
paste0( 'lat2=', ycent),
paste0( 'lon0=', xcent),
'ellps=WGS84 +datum=WGS84 +no_defs',
sep = ' +')
p4s
# read in the raster
raster_in <- brick( f, crs = p4s) #%>% rotate()
p4s <- "+proj=lcc +lat_1=34 +lat_2=34
+lat_0=34 +lon_0=110 +x_0=0 +y_0=0
+ellps=WGS84 +datum=WGS84 +units=m +no_defs"
p4s <- paste( '+proj=lcc',
paste0( 'lat1=', ycent),
paste0( 'lat2=', ycent),
paste0( 'lat0=', ycent),
paste0( 'lon0=', xcent),
'x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +no_defs',
sep = ' +')
p4s
p4s <- "+proj=lcc +lat_1=34 +lat_2=34
+lat_0=34 +lon_0=110 +x_0=0 +y_0=0
+ellps=WGS84 +datum=WGS84 +units=m +no_defs"
p4s <- paste( '+proj=lcc',
paste0( 'lat1=', ycent),
paste0( 'lat2=', ycent),
paste0( 'lat0=', ycent),
paste0( 'lon0=', xcent),
'x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +no_defs',
sep = ' +')
p4s
# read in the raster
raster_in <- brick( f, crs = p4s) #%>% rotate()
p4s
xcent
ycent
yorig
xorig
f_in
p_alp <- ncatt_get(f_in, varid = 0, 'P_ALP')$value
ycent
p_bet <- ncatt_get(f_in, varid = 0, 'P_BET')$value
p_bet
ycent
xcent
p4s <- paste( '+proj=lcc',
paste0( 'lat1=', p_alp),
paste0( 'lat2=', p_bet),
paste0( 'lat0=', ycent),
paste0( 'lon0=', xcent),
'ellps=WGS84 +datum=WGS84 +no_defs',
sep = ' +')
# read in the raster
raster_in <- brick( f, crs = p4s) #%>% rotate()
p4s
p4s <- "+proj=lcc +lat_1=33 +lat_2=45 +lat_0=40 +lon_0=-97 +a=6370000 +b=6370000"
# read in the raster
raster_in <- brick( f, crs = p4s) #%>% rotate()
raster_in
f_in
p4s <- paste( '+proj=lcc',
paste0( 'lat1=', p_alp),
paste0( 'lat2=', p_bet),
paste0( 'lat0=', ycent),
paste0( 'lon0=', xcent),
'a=6370000 +b=6370000',
sep = ' +')
p4s
# Describe grids from grid description
#define lat & lon in meters
lon <- seq( from = xorig, by = xcell, length.out = ncols)
lat <- seq( from = yorig, by = xcell, length.out = nrows)
lon
lat
#create an empty raster for grids with crs descriotion
latlon_raster.r <- expand.grid( lon = lon,
lat = lat,
values = NA) %>%
as.data.table %>%
rasterFromXYZ(
crs = p4s)
p4s
"+proj=lcc +lat_1=33 +lat_2=45 +lat_0=40 +lon_0=-97 +a=6370000 +b=6370000"
# create p4s
#https://forum.cmascenter.org/t/equates-grid-coordinates/3018/3
# p4s <- "+proj=lcc +lat_1=33 +lat_2=45 +lat_0=40 +lon_0=-97 +a=6370000 +b=6370000"
p4s <- paste( '+proj=lcc',
paste0( 'lat_1=', p_alp),
paste0( 'lat_2=', p_bet),
paste0( 'lat_0=', ycent),
paste0( 'lon_0=', xcent),
'a=6370000 +b=6370000',
sep = ' +')
# Describe grids from grid description
#define lat & lon in meters
lon <- seq( from = xorig, by = xcell, length.out = ncols)
lat <- seq( from = yorig, by = xcell, length.out = nrows)
#create an empty raster for grids with crs descriotion
latlon_raster.r <- expand.grid( lon = lon,
lat = lat,
values = NA) %>%
as.data.table %>%
rasterFromXYZ(
crs = p4s)
latlon_raster.r
# read in the raster
raster_in <- brick( f, crs = p4s) #%>% rotate()
raster_in
raster_fill = latlon_raster.r
raster_fill
values( raster_fill) <- brick( f)
raster_fill
#create an empty raster for grids with crs descriotion
latlon_raster.r <- expand.grid( lon = lon,
lat = lat,
values = NA) %>%
as.data.table %>%
rasterFromXYZ(
crs = p4s) %>% brick
raster_fill = latlon_raster.r
raster_fill
values( raster_fill) <- brick( f)
values( raster_fill) <- matrix( brick( f))
latlon_raster.r
# read in the raster
raster_in <- brick( f) #%>% rotate()
raster_in
plot( raster_in[[1]])
#create an empty raster for grids with crs descriotion
latlon_raster.r <- expand.grid( lon = lon,
lat = lat,
values = NA) %>%
as.data.table %>%
rasterFromXYZ(
crs = p4s) %>% brick( nl = 365)
latlon_raster.r
raster_fill
projectRaster( raster_in, raster_fill)
values( raster_fill) <- values( raster_in)
raster_fill
plot( raster_fill[[1]])
# create mask over NY state
ny_bounds <- USAboundaries::us_states( states = 'NY')
?us_cities
nyc_bounds <- USAboundaries::us_cities( states = 'NY')
nyc_bounds
nyc_bounds <- ny_cities['city' == 'New York City']
ny_cities <- USAboundaries::us_cities( states = 'NY')
nyc_bounds <- ny_cities['city' == 'New York City']
nyc_bounds
nyc_bounds <- ny_cities['city' == 'New York City',]
nyc_bounds
unique( ny_cities$city)
nyc_bounds <- ny_cities[ny_cities$city == 'New York City',]
nyc_bounds
plot( nyc_bounds)
?USAboundaries::us_zipcodes
mask_to = ny_bounds
# crop over the mask <-
raster_crop <-
crop( raster_fill, mask_to)
raster_crop
plot( raster_crop)
plot( mask_to)
# crop over the mask
mask_to <- st_transform( mask_to, p4s)
raster_crop <-
crop( raster_fill, mask_to)
raster_crop
plot( raster_crop)
plot( raster_crop[[1]])
mask_to
plot( mask_to[,'name'], add = T)
raster_crop <-
mask( raster_fill, mask_to)
plot( raster_crop[[1]])
raster_crop <-
crop( raster_fill, mask_to) %>%
mask( mask_to)
plot( raster_crop[[1]])
?mask
coords( raster_crop)
coordinates( raster_crop)
# create data table out output
data_out <-
data.table( coordinates( raster_crop),
values( raster_crop))
data_out
dim( data_out)
dim( na.omit( data_out))
name_in
f
# isolate the name
year_in <- gsub( '.*daily8hrmax.|.12US2.baseline.*', '', f)
year_in
# isolate the name
year_in <- gsub( '.*daily8hrmax.|.*dailyavgs.|.12US2.baseline.*', '', f)
year_in
f
name_in <- gsub( paste0( cmaq_loc, '/|//..*'), '', f)
name_in
cmaq_loc
name_in
name_in <- gsub( paste0( cmaq_loc, '/|.'), '', f)
name_in
name_in <- gsub( paste0( cmaq_loc, '/|.*'), '', f)
name_in
name_in <- gsub( paste0( cmaq_loc, '/|20.*'), '', f)
name_in
name_in <- gsub( paste0( cmaq_loc, '/|.20.*'), '', f)
name_in
f
fire_in <- gsub( '.*baseline|.ncf', '', f)
fire_in
# create data table out output
data_out <-
data.table( year = year_in,
name = name_in,
fire = fire_in,
coordinates( raster_crop),
values( raster_crop)) %>%
na.omit
data_out
?melt
# create data table out output
data_out <-
data.table( year = year_in,
name = name_in,
fire = fire_in,
coordinates( raster_crop),
values( raster_crop)) %>%
na.omit()
data_out
# list all the CMAQ files
files_all <- list.files( cmaq_loc,
# pattern = 'daily8hrmax.*.ncf',
full.names = TRUE)
# create crs from file information
f_in <- nc_open(files_all)
xorig <- ncatt_get(f_in, varid = 0, 'XORIG')$value
yorig <- ncatt_get(f_in, varid = 0, 'YORIG')$value
xcent <- ncatt_get(f_in, varid = 0, 'XCENT')$value
# create crs from file information
f_in <- nc_open(files_all[1])
xorig <- ncatt_get(f_in, varid = 0, 'XORIG')$value
yorig <- ncatt_get(f_in, varid = 0, 'YORIG')$value
xcent <- ncatt_get(f_in, varid = 0, 'XCENT')$value
ycent <- ncatt_get(f_in, varid = 0, 'YCENT')$value
ncols <- ncatt_get(f_in, varid = 0, 'NCOLS')$value
nrows <- ncatt_get(f_in, varid = 0, 'NROWS')$value
xcell <- ncatt_get(f_in, varid = 0, 'XCELL')$value
ycell <- ncatt_get(f_in, varid = 0, 'XCELL')$value
p_alp <- ncatt_get(f_in, varid = 0, 'P_ALP')$value
p_bet <- ncatt_get(f_in, varid = 0, 'P_BET')$value
# create p4s
#https://forum.cmascenter.org/t/equates-grid-coordinates/3018/3
# p4s <- "+proj=lcc +lat_1=33 +lat_2=45 +lat_0=40 +lon_0=-97 +a=6370000 +b=6370000"
p4s <- paste( '+proj=lcc',
paste0( 'lat_1=', p_alp),
paste0( 'lat_2=', p_bet),
paste0( 'lat_0=', ycent),
paste0( 'lon_0=', xcent),
'a=6370000 +b=6370000',
sep = ' +')
# Describe grids from grid description
#define lat & lon in meters
lon <- seq( from = xorig, by = xcell, length.out = ncols)
lat <- seq( from = yorig, by = xcell, length.out = nrows)
#create an empty raster for grids with crs descriotion
latlon_raster.r <- expand.grid( lon = lon,
lat = lat,
values = NA) %>%
as.data.table %>%
rasterFromXYZ(
crs = p4s) %>% brick( nl = 365)
# create mask over NY state
# https://github.com/cestastanford/historical-us-city-populations
ny_bounds <- USAboundaries::us_states( states = 'NY')
ny_cities <- USAboundaries::us_cities( states = 'NY')
nyc_bounds <- ny_cities[ny_cities$city == 'New York City',]
# reader function
read_fn <-
function( f,
raster_fill = latlon_raster.r,
mask_to = ny_bounds){
print( f)
# isolate the name
year_in <- gsub( '.*daily8hrmax.|.*dailyavgs.|.12US2.baseline.*', '', f)
name_in <- gsub( paste0( cmaq_loc, '/|.20.*'), '', f)
fire_in <- gsub( '.*baseline|.ncf', '', f)
message( name_in, year_in, fire_in)
# read in the raster
raster_in <- brick( f) #%>% rotate()
values( raster_fill) <- values( raster_in)
# crop over the mask
mask_to <- st_transform( mask_to, p4s)
raster_crop <-
crop( raster_fill, mask_to) %>%
mask( mask_to)
# create data table out output
data_out <-
data.table( year = year_in,
name = name_in,
fire = fire_in,
coordinates( raster_crop),
values( raster_crop)) %>%
na.omit()
# return the dimentions
return( data_out)
}
files_all
# read in the files
cmaq_in <-
lapply( files_all,
read_fn,
raster_fill = latlon_raster.r,
mask_to = ny_bounds)
cmaq_in
cmaq_in <- rbindlist( cmaq_in)
cmaq_in <- rbindlist( cmaq_in, fill = TRUE)
# read in the files
cmaq_in <-
lapply( files_all,
read_fn,
raster_fill = latlon_raster.r,
mask_to = ny_bounds)  %>%
rbindlist( fill = TRUE)
cmaq_in
dim( cmaq_in)
melt( cmaq_in, id.vars = c( 'year', 'name', 'fire'))
melt( cmaq_in, id.vars = c( 'year', 'name', 'fire', 'x', 'y'))
# reader function
read_fn <-
function( f,
raster_fill = latlon_raster.r,
mask_to = ny_bounds){
print( f)
# isolate the name
year_in <- gsub( '.*daily8hrmax.|.*dailyavgs.|.12US2.baseline.*', '', f)
name_in <- gsub( paste0( cmaq_loc, '/|.20.*'), '', f)
fire_in <- gsub( '.*baseline|.ncf', 'fire', f)
message( name_in, year_in, fire_in)
# read in the raster
raster_in <- brick( f) #%>% rotate()
values( raster_fill) <- values( raster_in)
# crop over the mask
mask_to <- st_transform( mask_to, p4s)
raster_crop <-
crop( raster_fill, mask_to) %>%
mask( mask_to)
# create data table out output
data_out <-
data.table( year = year_in,
name = name_in,
fire = fire_in,
coordinates( raster_crop),
values( raster_crop)) %>%
na.omit()
# return the dimentions
return( data_out)
}
melt( cmaq_in, id.vars = c( 'year', 'name', 'fire', 'x', 'y')) %>%
dcast.data.table( year + variable + name + x + y ~ fire,
value.var = 'value')
# read in the files
cmaq_in <-
lapply( files_all[1:2],
read_fn,
raster_fill = latlon_raster.r,
mask_to = ny_bounds)  %>%
rbindlist( fill = TRUE) %>%
na.omit() %>%
melt( id.vars = c( 'year', 'name', 'fire', 'x', 'y')) %>%
dcast.data.table( year + variable + name + x + y ~ fire,
value.var = 'value') %>%
melt( cmaq_in, id.vars = c( 'year', 'name', 'fire', 'x', 'y'))
# read in the files
cmaq_in <-
lapply( files_all[1:2],
read_fn,
raster_fill = latlon_raster.r,
mask_to = ny_bounds)  %>%
rbindlist( fill = TRUE) %>%
na.omit() %>%
melt( id.vars = c( 'year', 'name', 'fire', 'x', 'y')) %>%
dcast.data.table( year + variable + name + x + y ~ fire,
value.var = 'value')
cmaq_in
# read in the files
cmaq_in <-
lapply( files_all,
read_fn,
raster_fill = latlon_raster.r,
mask_to = ny_bounds)  %>%
rbindlist( fill = TRUE) %>%
na.omit() %>%
melt( id.vars = c( 'year', 'name', 'fire', 'x', 'y')) %>%
dcast.data.table( year + variable + name + x + y ~ fire,
value.var = 'value')
cmaq_in
# how big are the daily differences in NY?
summary( cmaq_in[name == 'daily8hrmax', fire_0firefire - firefire])
summary( cmaq_in[name == 'dailyavgs', fire_0firefire - firefire])
# how big are the daily differences in NY?
summary( cmaq_in[name == 'daily8hrmax', firefire - fire_0firefire])
summary( cmaq_in[name == 'dailyavgs', firefire - fire_0firefire])
# how big are the daily differences in NY?
hist( cmaq_in[name == 'daily8hrmax', firefire - fire_0firefire])
hist( cmaq_in[name == 'dailyavgs', firefire - fire_0firefire])
